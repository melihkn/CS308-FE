{"ast":null,"code":"var _jsxFileName = \"/Users/tunahanyazar/Desktop/Cs_308_Project_Frontend/CS308-FE/src/login.js\";\n// Login.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport './login.css';\n\n/*\n    Login component is a form that takes email and password as input.\n    When the form is submitted, it sends a POST request to the server to authenticate the user.\n    If the authentication is successful, it saves the JWT token coming from the backend to local storage and updates the login state in App.js.\n\n    From now on, in AppContent.js, isLoggedIn state will be true and userProfile state will be updated with the user's profile information.\n    \n    Props:\n        - onLogin: function to update the login state in App.js. It is passed from AppContent.js. It returns the login status, user id, and user profile information to AppContent.js.\n\n    State:\n        - email: input value for email\n        - password: input value for password\n\n    Redirects:\n        - Redirects to '/' after successful login which is home page\n*/\n\nconst Login = ({\n  onLogin\n}) => {\n  // State variables\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  // Login function\n  const handleLogin = async e => {\n    // Prevent the default form submission behavior (refreshing the page)\n    e.preventDefault();\n\n    // Send a POST request to the server to authenticate the user with email and password\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/login', {\n        email,\n        password\n      });\n      // Save the JWT token coming from the backend to local storage to keep the user logged in with the key 'token' \n      localStorage.setItem('token', response.data.access_token);\n\n      // Send a GET request by passing the token in the header to the server to get the user's profile information (using the /auth/status endpoint)\n      const profileResponse = await axios.get('http://127.0.0.1:8000/auth/status', {\n        headers: {\n          'Authorization': `Bearer ${response.data.access_token}`\n        }\n      });\n\n      // Update the login state in App.js with the login status, user id, and user profile information\n      onLogin(true, profileResponse.data.userId, profileResponse.data);\n\n      // Redirect to the home page after successful login and display an alert message to the user as google does\n      alert('Login successful');\n      navigate('/');\n    }\n    // Catch any error and display an alert message to the user\n    catch (error) {\n      var _error$response, _error$response$data;\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed');\n    }\n  };\n\n  // if the state of the isLoggedIn changes, the component will re-render and if the user now logged in, the local shopping cart will be merged with the persistent cart\n  useEffect(() => {\n    const mergeLocalCartWithPersistentCart = async () => {\n      if (isLoggedIn && userId) {\n        const localCart = JSON.parse(localStorage.getItem(\"cart\") || \"[]\");\n        if (localCart.length > 0) {\n          // Send local cart items to backend for merging\n          await axios.post(`http://127.0.0.1:8001/cart/merge`, {\n            items: localCart,\n            customer_id: userId\n          });\n\n          // Clear local storage as it's now merged\n          localStorage.removeItem(\"cart\");\n\n          // Fetch updated cart from backend\n          const response = await axios.get(`http://127.0.0.1:8001/cart/${userId}`);\n          setCartItems(response.data.cart);\n        }\n      }\n    };\n    mergeLocalCartWithPersistentCart();\n  }, [isLoggedIn, userId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"center-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    className: \"form-control\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    className: \"form-control\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Login\")));\n};\nexport default Login;","map":{"version":3,"names":["React","useState","axios","useNavigate","Login","onLogin","email","setEmail","password","setPassword","navigate","handleLogin","e","preventDefault","response","post","localStorage","setItem","data","access_token","profileResponse","get","headers","userId","alert","error","_error$response","_error$response$data","detail","useEffect","mergeLocalCartWithPersistentCart","isLoggedIn","localCart","JSON","parse","getItem","length","items","customer_id","removeItem","setCartItems","cart","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required"],"sources":["/Users/tunahanyazar/Desktop/Cs_308_Project_Frontend/CS308-FE/src/login.js"],"sourcesContent":["// Login.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport './login.css';\n\n/*\n    Login component is a form that takes email and password as input.\n    When the form is submitted, it sends a POST request to the server to authenticate the user.\n    If the authentication is successful, it saves the JWT token coming from the backend to local storage and updates the login state in App.js.\n\n    From now on, in AppContent.js, isLoggedIn state will be true and userProfile state will be updated with the user's profile information.\n    \n    Props:\n        - onLogin: function to update the login state in App.js. It is passed from AppContent.js. It returns the login status, user id, and user profile information to AppContent.js.\n\n    State:\n        - email: input value for email\n        - password: input value for password\n\n    Redirects:\n        - Redirects to '/' after successful login which is home page\n*/\n\nconst Login = ({ onLogin }) => {\n  // State variables\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  // Login function\n  const handleLogin = async (e) => {\n    // Prevent the default form submission behavior (refreshing the page)\n    e.preventDefault();\n\n    // Send a POST request to the server to authenticate the user with email and password\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/login', { email, password });\n      // Save the JWT token coming from the backend to local storage to keep the user logged in with the key 'token' \n      localStorage.setItem('token', response.data.access_token);\n\n      // Send a GET request by passing the token in the header to the server to get the user's profile information (using the /auth/status endpoint)\n      const profileResponse = await axios.get('http://127.0.0.1:8000/auth/status', {\n        headers: { 'Authorization': `Bearer ${response.data.access_token}` }\n      });\n\n      // Update the login state in App.js with the login status, user id, and user profile information\n      onLogin(true, profileResponse.data.userId, profileResponse.data);\n      \n      // Redirect to the home page after successful login and display an alert message to the user as google does\n      alert('Login successful');\n      navigate('/');\n\n    }\n    // Catch any error and display an alert message to the user\n    catch (error) {\n      alert(error.response?.data?.detail || 'Login failed');\n    }\n  };\n\n\n  // if the state of the isLoggedIn changes, the component will re-render and if the user now logged in, the local shopping cart will be merged with the persistent cart\n  useEffect(() => {\n    const mergeLocalCartWithPersistentCart = async () => {\n      if (isLoggedIn && userId) {\n        const localCart = JSON.parse(localStorage.getItem(\"cart\") || \"[]\");\n\n        if (localCart.length > 0) {\n          // Send local cart items to backend for merging\n          await axios.post(`http://127.0.0.1:8001/cart/merge`, {\n            items: localCart,\n            customer_id: userId,\n          });\n\n          // Clear local storage as it's now merged\n          localStorage.removeItem(\"cart\");\n\n          // Fetch updated cart from backend\n          const response = await axios.get(`http://127.0.0.1:8001/cart/${userId}`);\n          setCartItems(response.data.cart);\n        }\n      }\n    };\n\n    mergeLocalCartWithPersistentCart();\n  }, [isLoggedIn, userId]);\n\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"center-text\">Login</h2>\n      <form onSubmit={handleLogin}>\n        <div className=\"mb-3\">\n          <label>Email</label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAC7B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMS,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMQ,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/B;IACAA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,6BAA6B,EAAE;QAAET,KAAK;QAAEE;MAAS,CAAC,CAAC;MACrF;MACAQ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACC,YAAY,CAAC;;MAEzD;MACA,MAAMC,eAAe,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,mCAAmC,EAAE;QAC3EC,OAAO,EAAE;UAAE,eAAe,EAAE,UAAUR,QAAQ,CAACI,IAAI,CAACC,YAAY;QAAG;MACrE,CAAC,CAAC;;MAEF;MACAd,OAAO,CAAC,IAAI,EAAEe,eAAe,CAACF,IAAI,CAACK,MAAM,EAAEH,eAAe,CAACF,IAAI,CAAC;;MAEhE;MACAM,KAAK,CAAC,kBAAkB,CAAC;MACzBd,QAAQ,CAAC,GAAG,CAAC;IAEf;IACA;IACA,OAAOe,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACZH,KAAK,CAAC,EAAAE,eAAA,GAAAD,KAAK,CAACX,QAAQ,cAAAY,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBR,IAAI,cAAAS,oBAAA,uBAApBA,oBAAA,CAAsBC,MAAM,KAAI,cAAc,CAAC;IACvD;EACF,CAAC;;EAGD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMC,gCAAgC,GAAG,MAAAA,CAAA,KAAY;MACnD,IAAIC,UAAU,IAAIR,MAAM,EAAE;QACxB,MAAMS,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAClB,YAAY,CAACmB,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;QAElE,IAAIH,SAAS,CAACI,MAAM,GAAG,CAAC,EAAE;UACxB;UACA,MAAMlC,KAAK,CAACa,IAAI,CAAC,kCAAkC,EAAE;YACnDsB,KAAK,EAAEL,SAAS;YAChBM,WAAW,EAAEf;UACf,CAAC,CAAC;;UAEF;UACAP,YAAY,CAACuB,UAAU,CAAC,MAAM,CAAC;;UAE/B;UACA,MAAMzB,QAAQ,GAAG,MAAMZ,KAAK,CAACmB,GAAG,CAAC,8BAA8BE,MAAM,EAAE,CAAC;UACxEiB,YAAY,CAAC1B,QAAQ,CAACI,IAAI,CAACuB,IAAI,CAAC;QAClC;MACF;IACF,CAAC;IAEDX,gCAAgC,CAAC,CAAC;EACpC,CAAC,EAAE,CAACC,UAAU,EAAER,MAAM,CAAC,CAAC;EAGxB,oBACEvB,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,WAAW;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACxBjD,KAAA,CAAA0C,aAAA;IAAIC,SAAS,EAAC,aAAa;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAS,CAAC,eACtCjD,KAAA,CAAA0C,aAAA;IAAMQ,QAAQ,EAAEvC,WAAY;IAAAiC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BjD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnBjD,KAAA,CAAA0C,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAO,OAAY,CAAC,eACpBjD,KAAA,CAAA0C,aAAA;IACES,IAAI,EAAC,OAAO;IACZR,SAAS,EAAC,cAAc;IACxBS,KAAK,EAAE9C,KAAM;IACb+C,QAAQ,EAAGzC,CAAC,IAAKL,QAAQ,CAACK,CAAC,CAAC0C,MAAM,CAACF,KAAK,CAAE;IAC1CG,QAAQ;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACT,CACE,CAAC,eACNjD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnBjD,KAAA,CAAA0C,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAO,UAAe,CAAC,eACvBjD,KAAA,CAAA0C,aAAA;IACES,IAAI,EAAC,UAAU;IACfR,SAAS,EAAC,cAAc;IACxBS,KAAK,EAAE5C,QAAS;IAChB6C,QAAQ,EAAGzC,CAAC,IAAKH,WAAW,CAACG,CAAC,CAAC0C,MAAM,CAACF,KAAK,CAAE;IAC7CG,QAAQ;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACT,CACE,CAAC,eACNjD,KAAA,CAAA0C,aAAA;IAAQS,IAAI,EAAC,QAAQ;IAACR,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAa,CAC3D,CACH,CAAC;AAEV,CAAC;AAED,eAAe7C,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}