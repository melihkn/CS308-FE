{"ast":null,"code":"var _jsxFileName = \"/Users/tunahanyazar/Desktop/Cs_308_Project_Frontend/CS308-FE/src/ShoppingCart.js\";\n// ShoppingCart.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ProductCard from './ProductCard';\nimport './ShoppingCart.css';\n\n// ShoppingCart component (a type of function) displays the items in the shopping cart.\nfunction ShoppingCart({\n  isLoggedIn,\n  userId\n}) {\n  const [cartItems, setCartItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  // this useEffect will be valled when user logs in or logs out\n  useEffect(() => {\n    const fetchCartItems = async () => {\n      // if the last of action of user is logging in, from now on, cartItems will be fetched from the backend using the appropriate endpoint\n      if (isLoggedIn && userId) {\n        try {\n          // try to call the cart service of the backend to get the cart items of the user\n          const response = await axios.get(`http://127.0.0.1:8001/cart/${userId}`);\n          // then set the state variable cartItems to the cart items of the user\n          setCartItems(response.data.cart);\n        } catch (error) {\n          // if there is an error, catch the error and log it to the console\n          console.error(\"Error fetching cart items:\", error);\n        }\n      } else {\n        // if the last of action of user is logging out, from now on, cartItems will be fetched from the session storage\n        const storedCart = JSON.parse(sessionStorage.getItem(\"cart\") || \"[]\");\n        setCartItems(storedCart);\n      }\n    };\n    fetchCartItems();\n  }, [isLoggedIn, userId]);\n\n  // Calculate total price\n  useEffect(() => {\n    const calculateTotal = () => {\n      const total = cartItems.reduce((sum, item) => sum + (item.quantity * item.price || 0), 0);\n      setTotalPrice(total);\n    };\n    calculateTotal();\n  }, [cartItems]);\n\n  // Adjust item quantity\n  const adjustQuantity = async (productId, delta) => {\n    // Increase/decrease quantity in backend or session storage based on delta\n    const updatedItems = cartItems.map(item => item.product_id === productId ? {\n      ...item,\n      quantity: item.quantity + delta\n    } : item).filter(item => item.quantity > 0);\n    setCartItems(updatedItems);\n    sessionStorage.setItem(\"cart\", JSON.stringify(updatedItems));\n    if (isLoggedIn && userId) {\n      const endpoint = delta > 0 ? \"increase_quantity\" : \"decrease_quantity\";\n      await axios.patch(`http://127.0.0.1:8001/cart/${endpoint}`, {\n        product_id: productId,\n        customer_id: userId\n      });\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = async productId => {\n    const updatedItems = cartItems.filter(item => item.product_id !== productId);\n    setCartItems(updatedItems);\n    sessionStorage.setItem(\"cart\", JSON.stringify(updatedItems));\n    if (isLoggedIn && userId) {\n      await axios.delete(`http://127.0.0.1:8001/cart/remove`, {\n        data: {\n          product_id: productId,\n          customer_id: userId\n        }\n      });\n    }\n  };\n\n  // if the state of the isLoggedIn changes, the component will re-render and if the user now logged in, the local shopping cart will be merged with the persistent cart\n  useEffect(() => {\n    const mergeLocalCartWithPersistentCart = async () => {\n      if (isLoggedIn && userId) {\n        const localCart = JSON.parse(localStorage.getItem(\"cart\") || \"[]\");\n        if (localCart.length > 0) {\n          // Send local cart items to backend for merging\n          await axios.post(`http://127.0.0.1:8001/cart/merge`, {\n            items: localCart,\n            customer_id: userId\n          });\n\n          // Clear local storage as it's now merged\n          localStorage.removeItem(\"cart\");\n\n          // Fetch updated cart from backend\n          const response = await axios.get(`http://127.0.0.1:8001/cart/${userId}`);\n          setCartItems(response.data.cart);\n        }\n      }\n    };\n    mergeLocalCartWithPersistentCart();\n  }, [isLoggedIn, userId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shopping-cart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, cartItems.length > 0 ? \"Shopping Cart\" : \"Shopping Cart is empty\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, cartItems.map(item => /*#__PURE__*/React.createElement(ProductCard, {\n    key: item.product_id,\n    name: item.name,\n    model: item.model,\n    description: item.description,\n    quantity: item.quantity,\n    distributor: item.distributor,\n    imageUrl: item.image_url,\n    onIncrease: () => adjustQuantity(item.product_id, 1),\n    onDecrease: () => adjustQuantity(item.product_id, -1),\n    onRemove: () => removeFromCart(item.product_id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"Total Price: $\", totalPrice.toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => alert(\"Redirect to checkout\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"Proceed to Checkout\")));\n}\nexport default ShoppingCart;","map":{"version":3,"names":["React","useEffect","useState","axios","ProductCard","ShoppingCart","isLoggedIn","userId","cartItems","setCartItems","totalPrice","setTotalPrice","fetchCartItems","response","get","data","cart","error","console","storedCart","JSON","parse","sessionStorage","getItem","calculateTotal","total","reduce","sum","item","quantity","price","adjustQuantity","productId","delta","updatedItems","map","product_id","filter","setItem","stringify","endpoint","patch","customer_id","removeFromCart","delete","mergeLocalCartWithPersistentCart","localCart","localStorage","length","post","items","removeItem","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","name","model","description","distributor","imageUrl","image_url","onIncrease","onDecrease","onRemove","toFixed","onClick","alert"],"sources":["/Users/tunahanyazar/Desktop/Cs_308_Project_Frontend/CS308-FE/src/ShoppingCart.js"],"sourcesContent":["// ShoppingCart.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ProductCard from './ProductCard';\nimport './ShoppingCart.css';\n\n// ShoppingCart component (a type of function) displays the items in the shopping cart.\nfunction ShoppingCart({ isLoggedIn, userId }) {\n  const [cartItems, setCartItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  // this useEffect will be valled when user logs in or logs out\n  useEffect(() => {\n    const fetchCartItems = async () => {\n      // if the last of action of user is logging in, from now on, cartItems will be fetched from the backend using the appropriate endpoint\n      if (isLoggedIn && userId) {\n        try {\n          // try to call the cart service of the backend to get the cart items of the user\n          const response = await axios.get(`http://127.0.0.1:8001/cart/${userId}`);\n          // then set the state variable cartItems to the cart items of the user\n          setCartItems(response.data.cart);\n        } \n        catch (error) {\n          // if there is an error, catch the error and log it to the console\n          console.error(\"Error fetching cart items:\", error);\n        }\n      } \n      else {\n        // if the last of action of user is logging out, from now on, cartItems will be fetched from the session storage\n        const storedCart = JSON.parse(sessionStorage.getItem(\"cart\") || \"[]\");\n        setCartItems(storedCart);\n      }\n    };\n\n    fetchCartItems();\n  }, [isLoggedIn, userId]);\n\n  // Calculate total price\n  useEffect(() => {\n    const calculateTotal = () => {\n      const total = cartItems.reduce((sum, item) => sum + (item.quantity * item.price || 0), 0);\n      setTotalPrice(total);\n    };\n    calculateTotal();\n  }, [cartItems]);\n\n  // Adjust item quantity\n  const adjustQuantity = async (productId, delta) => {\n    // Increase/decrease quantity in backend or session storage based on delta\n    const updatedItems = cartItems.map(item => \n      item.product_id === productId ? { ...item, quantity: item.quantity + delta } : item\n    ).filter(item => item.quantity > 0);\n\n    setCartItems(updatedItems);\n    sessionStorage.setItem(\"cart\", JSON.stringify(updatedItems));\n\n    if (isLoggedIn && userId) {\n      const endpoint = delta > 0 ? \"increase_quantity\" : \"decrease_quantity\";\n      await axios.patch(`http://127.0.0.1:8001/cart/${endpoint}`, { product_id: productId, customer_id: userId });\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = async (productId) => {\n    const updatedItems = cartItems.filter(item => item.product_id !== productId);\n    setCartItems(updatedItems);\n    sessionStorage.setItem(\"cart\", JSON.stringify(updatedItems));\n\n    if (isLoggedIn && userId) {\n      await axios.delete(`http://127.0.0.1:8001/cart/remove`, { data: { product_id: productId, customer_id: userId } });\n    }\n  };\n\n\n  // if the state of the isLoggedIn changes, the component will re-render and if the user now logged in, the local shopping cart will be merged with the persistent cart\n  useEffect(() => {\n    const mergeLocalCartWithPersistentCart = async () => {\n      if (isLoggedIn && userId) {\n        const localCart = JSON.parse(localStorage.getItem(\"cart\") || \"[]\");\n\n        if (localCart.length > 0) {\n          // Send local cart items to backend for merging\n          await axios.post(`http://127.0.0.1:8001/cart/merge`, {\n            items: localCart,\n            customer_id: userId,\n          });\n\n          // Clear local storage as it's now merged\n          localStorage.removeItem(\"cart\");\n\n          // Fetch updated cart from backend\n          const response = await axios.get(`http://127.0.0.1:8001/cart/${userId}`);\n          setCartItems(response.data.cart);\n        }\n      }\n    };\n\n    mergeLocalCartWithPersistentCart();\n  }, [isLoggedIn, userId]);\n\n  return (\n    <div className=\"shopping-cart-container\">\n      {/* Header based on cart items count */}\n      <h2>{cartItems.length > 0 ? \"Shopping Cart\" : \"Shopping Cart is empty\"}</h2>\n\n      <div className=\"cart-items\">\n        {cartItems.map(item => (\n          <ProductCard\n            key={item.product_id}\n            name={item.name}\n            model={item.model}\n            description={item.description}\n            quantity={item.quantity}\n            distributor={item.distributor}\n            imageUrl={item.image_url}\n            onIncrease={() => adjustQuantity(item.product_id, 1)}\n            onDecrease={() => adjustQuantity(item.product_id, -1)}\n            onRemove={() => removeFromCart(item.product_id)}\n          />\n        ))}\n      </div>\n      <div className=\"cart-summary\">\n        <h3>Total Price: ${totalPrice.toFixed(2)}</h3>\n        {/* Redirect to checkout page -> TO DO LATER */}\n        <button onClick={() => alert(\"Redirect to checkout\")}>\n          Proceed to Checkout\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ShoppingCart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}